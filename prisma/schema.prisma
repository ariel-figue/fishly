generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  firstName    String?
  lastName     String?
  passwordHash String
  avatar       String? 
  createdAt    DateTime @default(now())

  catches       Catch[]
  favoriteSpots FavoriteLocation[]
  friendships   Friendship[] @relation(name: "UserFriendships")
  friendOf      Friendship[] @relation(name: "FriendUserFriendships")
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  privacy       PrivacySettings?
  auditLogs     AuditLog[]
  oauthAccounts OAuthAccount[]

  @@map("users")
}

// 🎣 Fish Species Table
model FishSpecies {
  id             String @id @default(uuid())
  commonName     String @unique
  scientificName String @unique
  minSize        Float?
  maxSize        Float?
  bagLimit       Int?
  regulations    Regulation[]
  catches        Catch[]
}

// 📜 Regulations Table
model Regulation {
  id          String @id @default(uuid())
  state       String
  fishId      String // 🛠 Changed from Int to String
  minSize     Float?
  maxSize     Float?
  bagLimit    Int?
  seasonStart DateTime?
  seasonEnd   DateTime?

  fish FishSpecies @relation(fields: [fishId], references: [id], onDelete: Cascade)

  @@index([state, fishId])
}

// 📍 Fishing Location Table
model Location {
  id        String @id @default(uuid())
  name      String
  latitude  Float
  longitude Float
  catches   Catch[]
  favorites FavoriteLocation[]
}

// 🎣 Fish Catch Table
model Catch {
  id         String @id @default(uuid())
  userId     String // 🛠 Changed from Int to String
  speciesId  String // 🛠 Changed from Int to String
  locationId String // 🛠 Changed from Int to String
  weight     Float?
  length     Float?
  imageUrl   String?
  baitUsed   String?
  timestamp  DateTime @default(now())

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  species  FishSpecies @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  location Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)

  weather Weather? @relation(name: "CatchWeather")

  comments Comment[]
  likes    Like[]

  @@index([userId, speciesId])
}

// ☁️ Weather Table
model Weather {
  id      String @id @default(uuid())
  catchId String @unique // 🛠 Changed from Int to String

  temperature Float?
  windSpeed   Float?
  humidity    Float?
  condition   String?

  catch Catch @relation(name: "CatchWeather", fields: [catchId], references: [id], onDelete: Cascade)
}

// 📍 Favorite Fishing Locations Table
model FavoriteLocation {
  id         String @id @default(uuid())
  userId     String // 🛠 Changed from Int to String
  locationId String // 🛠 Changed from Int to String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

// 👥 Friendships Table
model Friendship {
  id        String @id @default(uuid())
  userId    String // 🛠 Changed from Int to String
  friendId  String // 🛠 Changed from Int to String
  status    String @default("pending")
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserFriendships")
  friend User @relation(fields: [friendId], references: [id], onDelete: Cascade, name: "FriendUserFriendships")

  @@unique([userId, friendId])
  @@index([userId, friendId])
}

// 💬 Comments on Catches
model Comment {
  id        String @id @default(uuid())
  userId    String // 🛠 Changed from Int to String
  catchId   String // 🛠 Changed from Int to String
  text      String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  catch Catch @relation(fields: [catchId], references: [id], onDelete: Cascade)
}

// 👍 Likes on Catches
model Like {
  id      String @id @default(uuid())
  userId  String // 🛠 Changed from Int to String
  catchId String // 🛠 Changed from Int to String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  catch Catch @relation(fields: [catchId], references: [id], onDelete: Cascade)
}

// 🔔 Notifications Table
model Notification {
  id        String @id @default(uuid())
  userId    String // 🛠 Changed from Int to String
  message   String
  createdAt DateTime @default(now())
  read      Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 🔒 Privacy Settings
model PrivacySettings {
  id          String @id @default(uuid())
  userId      String @unique // 🛠 Changed from Int to String
  profileView String @default("public")
  catchView   String @default("public")
  friendList  String @default("public")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 🔍 Audit Log Table
model AuditLog {
  id        String @id @default(uuid())
  userId    String // 🛠 Changed from Int to String
  action    String
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 🔑 OAuth Authentication
model OAuthAccount {
  id           String @id @default(uuid())
  userId       String // 🛠 Changed from Int to String
  provider     String
  providerId   String @unique
  accessToken  String @map("_accessToken")
  refreshToken String? @map("_refreshToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
